version: '3.3'

volumes:
  postgres_data: {}

services:
  postgres:
    image: 'postgres:14-alpine'
    volumes:
      - './volumes/postgres:/var/lib/postgresql/data'
    env_file: .env
    ports:
      - "5433:5432"
    networks:
      - nexcruise-v2-net

  redis:
    image: 'redis:alpine'
    ports:
      - "6380:6379"
    networks:
      - nexcruise-v2-net

  celery:
    build:
      dockerfile: CeleryDockerfile
      context: ./backend
    command: celery -A config worker -c 4 -l DEBUG
    volumes:
      - './backend:/app'
    depends_on:
      - postgres
      - redis
    env_file: .env
    networks:
      - nexcruise-v2-net
  
  celery-beat:
    build:
      dockerfile: CeleryDockerfile
      context: ./backend
    command: celery -A config beat -l DEBUG
    volumes:
      - './backend:/app'
    depends_on:
      - postgres
      - redis
    env_file: .env
    networks:
      - nexcruise-v2-net

  # nodereact:
  #   build:
  #     context: .
  #     dockerfile: ./frontend/Dockerfile
  #   environment:
  #     # enables hot reloading
  #     - CHOKIDAR_USEPOLLING=true
  #   volumes:
  #     - ./frontend:/code
  #     - /code/node_modules

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - '9000:8000'
    depends_on:
      - redis
      - postgres
      - celery
      - mailhog
    volumes:
      - .:/app
    command: /start.sh
    entrypoint: /entrypoint.sh
    restart: on-failure
    env_file: .env
    networks:
      - nexcruise-v2-net

  mailhog:
    image: mailhog/mailhog
    restart: always
    ports:
      - 9025:8025
    logging:
      driver: none
    networks:
      - nexcruise-v2-net

networks:
  nexcruise-v2-net:
    driver: bridge
